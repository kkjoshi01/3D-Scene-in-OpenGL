#version 330 core
//Attenuation and Spotlight code is modified and modelled from: https://learnopengl.com/Lighting/Light-casters

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;
 
uniform vec3 viewPos;

struct Light {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float intensity;

  float constant;
  float linear;
  float quadratic;

  vec3 direction;
  float cutOff;
  float outerCutOff;
  float spotLightEnabled;

};

#define MAX_POINT_LIGHTS 10  
uniform Light lights[MAX_POINT_LIGHTS];
uniform int numLights;

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
}; 
  
uniform Material material;

vec3 CalcPointLight(Light light, vec3 norm, vec3 aPos, vec3 viewDir) {
  // ambient
  vec3 ambient = light.ambient * material.ambient;

  // diffuse
  vec3 lightDir = normalize(light.position - aPos);  
  float diff = max(dot(norm, lightDir), 0.0);
  vec3 diffuse = light.diffuse * (diff * material.diffuse);
  
  // specular 
  vec3 reflectDir = reflect(-lightDir, norm);  
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  vec3 specular = light.specular * (spec * material.specular);
  
  //Attenuation
  float distance = length(light.position - aPos);
  float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * distance * distance);

  return (ambient + diffuse + specular) * light.intensity * attenuation;
}

vec3 CalcSpotLight(Light light, vec3 norm, vec3 aPos, vec3 viewDir) {
  vec3 ambient = light.ambient * material.ambient;

  
  vec3 lightDir = normalize(light.position - aPos);
  
  //Spotlight
  float theta = dot(lightDir, normalize(-light.direction));
  float epsilon = light.cutOff - light.outerCutOff;
  float intensity = smoothstep(0.0,1.0,(theta - light.outerCutOff)/epsilon);


  if (theta > epsilon) {
    
    //Attenuation
    float distance = length(light.position - aPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * distance * distance);
    
    
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = light.diffuse * (diff * material.diffuse);
  
    // specular 
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = light.specular * (spec * material.specular);

    intensity *= attenuation;

    diffuse *= intensity;
    specular *= intensity;

    return (ambient + specular + diffuse) * light.intensity;
  }

  return ambient * light.intensity;

}

void main() {
  vec3 norm = normalize(aNormal);
  vec3 viewDir = normalize(viewPos - aPos);

  vec3 result = vec3(0.0);
  for(int i = 0; i < numLights; i++)
    if (lights[i].spotLightEnabled == 1) {
      result += CalcSpotLight(lights[i], norm, aPos, viewDir);
    } else {
      result += CalcPointLight(lights[i], norm, aPos, viewDir); 
    }
    
  fragColor = vec4(result, 1.0);
}


